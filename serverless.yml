service: sentiment-analysis-serverless

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "*"
      Resource:
        - "*"

functions:
  s3Trigger:
    handler: src/handlers/s3Trigger.handler
    environment:
      stage: ${self:provider.stage}
      statemachine_arn: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:hellostepfunc1
      
    events:
      - s3:
          bucket: sentiment-analysis-serverless-source
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
  readFeedback:
    handler: src/handlers/readFeedback.handler
  computeSentiment:
    handler: src/handlers/computeSentiment.handler
  iterator:
    handler: src/handlers/iterator.handler

stepFunctions:
  stateMachines:
    hellostepfunc1:
      name: "hellostepfunc1"
      definition:
        Comment: "Read CSV files and do sentiment analysis"
        StartAt: ReadFeedbackFromS3
        States:
          ReadFeedbackFromS3:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-readFeedback"
            Next: ProcessAllItems
          ProcessAllItems:
            Type: Parallel
            InputPath: $
            Branches:
              - StartAt: ConfigureCountEN
                States:
                  ConfigureCountEN:
                    Type: Pass
                    Parameters:
                      records.$: $.en
                      counter: 10
                      languageCode: "en"
                    ResultPath: $.iterator
                    Next: CurateData
                  CurateData:
                    Type: Pass
                    OutputPath: $.iterator
                    Next: Iterator
                  Iterator:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-iterator"
                    Next: IsCountReached
                  IsCountReached:
                    Type: Choice
                    Choices:
                      - Variable: $.continue
                        BooleanEquals: true
                        Next: ComputeSentimentEN
                    Default: DefaultState
                  ComputeSentimentEN:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-computeSentiment"
                    ResultPath: $.result
                    Next: Iterator
                  DefaultState:
                    Type: Pass
                    Parameters:
                      continue.$: $.continue
                    End: true
              - StartAt: ComputeSentimentES
                States:
                  ComputeSentimentES:
                    InputPath: $.es
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-computeSentiment"
                    Catch:
                      - ErrorEquals:
                          - States.ALL
                        ResultPath: $.error
                        Next: Fallback
                    End: true
                  Fallback:
                    Type: Pass
                    Result: ComputeSentimentES, AWS Step Functions!
                    End: true
            End: true

resources:
  Resources:
    ProcessedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: sentiment-analysis-serverless-destination

custom:
  bundle:
    linting: false
